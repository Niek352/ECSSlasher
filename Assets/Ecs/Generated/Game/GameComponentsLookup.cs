//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class GameComponentsLookup
{
	public const int Bullet = 0;
	public const int CharacterController = 1;
	public const int LifeTime = 2;
	public const int Player = 3;
	public const int Camera = 4;
	public const int Instantiate = 5;
	public const int Link = 6;
	public const int LocalPosition = 7;
	public const int LookDirection = 8;
	public const int Position = 9;
	public const int Prefab = 10;
	public const int Rotation = 11;
	public const int Transform = 12;
	public const int Velocity = 13;
	public const int LinkRemovedListener = 14;
	public const int LocalPositionAddedListener = 15;
	public const int PositionAddedListener = 16;
	public const int RotationAddedListener = 17;
	public const int VelocityAddedListener = 18;

	public const int TotalComponents = 19;

	public static readonly string[] ComponentNames =
	{
		"Bullet",
		"CharacterController",
		"LifeTime",
		"Player",
		"Camera",
		"Instantiate",
		"Link",
		"LocalPosition",
		"LookDirection",
		"Position",
		"Prefab",
		"Rotation",
		"Transform",
		"Velocity",
		"LinkRemovedListener",
		"LocalPositionAddedListener",
		"PositionAddedListener",
		"RotationAddedListener",
		"VelocityAddedListener"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(Ecs.Game.Components.BulletComponent),
		typeof(Ecs.Game.Components.CharacterControllerComponent),
		typeof(Ecs.Game.Components.LifeTimeComponent),
		typeof(Ecs.Game.Components.PlayerComponent),
		typeof(Ecs.Game.Core.Components.CameraComponent),
		typeof(Ecs.Game.Core.Components.InstantiateComponent),
		typeof(Ecs.Game.Core.Components.LinkComponent),
		typeof(Ecs.Game.Core.Components.LocalPositionComponent),
		typeof(Ecs.Game.Core.Components.LookDirectionComponent),
		typeof(Ecs.Game.Core.Components.PositionComponent),
		typeof(Ecs.Game.Core.Components.PrefabComponent),
		typeof(Ecs.Game.Core.Components.RotationComponent),
		typeof(Ecs.Game.Core.Components.TransformComponent),
		typeof(Ecs.Game.Core.Components.VelocityComponent),
		typeof(LinkRemovedListenerComponent),
		typeof(LocalPositionAddedListenerComponent),
		typeof(PositionAddedListenerComponent),
		typeof(RotationAddedListenerComponent),
		typeof(VelocityAddedListenerComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(Ecs.Game.Components.BulletComponent), 0 },
		{ typeof(Ecs.Game.Components.CharacterControllerComponent), 1 },
		{ typeof(Ecs.Game.Components.LifeTimeComponent), 2 },
		{ typeof(Ecs.Game.Components.PlayerComponent), 3 },
		{ typeof(Ecs.Game.Core.Components.CameraComponent), 4 },
		{ typeof(Ecs.Game.Core.Components.InstantiateComponent), 5 },
		{ typeof(Ecs.Game.Core.Components.LinkComponent), 6 },
		{ typeof(Ecs.Game.Core.Components.LocalPositionComponent), 7 },
		{ typeof(Ecs.Game.Core.Components.LookDirectionComponent), 8 },
		{ typeof(Ecs.Game.Core.Components.PositionComponent), 9 },
		{ typeof(Ecs.Game.Core.Components.PrefabComponent), 10 },
		{ typeof(Ecs.Game.Core.Components.RotationComponent), 11 },
		{ typeof(Ecs.Game.Core.Components.TransformComponent), 12 },
		{ typeof(Ecs.Game.Core.Components.VelocityComponent), 13 },
		{ typeof(LinkRemovedListenerComponent), 14 },
		{ typeof(LocalPositionAddedListenerComponent), 15 },
		{ typeof(PositionAddedListenerComponent), 16 },
		{ typeof(RotationAddedListenerComponent), 17 },
		{ typeof(VelocityAddedListenerComponent), 18 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
