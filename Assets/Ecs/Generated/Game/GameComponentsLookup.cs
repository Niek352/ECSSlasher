//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.4.7.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class GameComponentsLookup
{
	public const int AttackRange = 0;
	public const int Bullet = 1;
	public const int CharacterController = 2;
	public const int CharacterId = 3;
	public const int Cooldown = 4;
	public const int Damage = 5;
	public const int Dead = 6;
	public const int Defence = 7;
	public const int Enemy = 8;
	public const int EnemyModel = 9;
	public const int EnemyWave = 10;
	public const int Health = 11;
	public const int LayerMask = 12;
	public const int LifeTime = 13;
	public const int MaxCooldown = 14;
	public const int MoveSpeed = 15;
	public const int Player = 16;
	public const int StateMachine = 17;
	public const int Target = 18;
	public const int Camera = 19;
	public const int Instantiate = 20;
	public const int Link = 21;
	public const int LocalPosition = 22;
	public const int LookDirection = 23;
	public const int Position = 24;
	public const int Prefab = 25;
	public const int Rotation = 26;
	public const int Transform = 27;
	public const int Velocity = 28;
	public const int LinkRemovedListener = 29;
	public const int LocalPositionAddedListener = 30;
	public const int PositionAddedListener = 31;
	public const int RotationAddedListener = 32;
	public const int VelocityAddedListener = 33;

	public const int TotalComponents = 34;

	public static readonly string[] ComponentNames =
	{
		"AttackRange",
		"Bullet",
		"CharacterController",
		"CharacterId",
		"Cooldown",
		"Damage",
		"Dead",
		"Defence",
		"Enemy",
		"EnemyModel",
		"EnemyWave",
		"Health",
		"LayerMask",
		"LifeTime",
		"MaxCooldown",
		"MoveSpeed",
		"Player",
		"StateMachine",
		"Target",
		"Camera",
		"Instantiate",
		"Link",
		"LocalPosition",
		"LookDirection",
		"Position",
		"Prefab",
		"Rotation",
		"Transform",
		"Velocity",
		"LinkRemovedListener",
		"LocalPositionAddedListener",
		"PositionAddedListener",
		"RotationAddedListener",
		"VelocityAddedListener"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(Ecs.Game.Components.AttackRangeComponent),
		typeof(Ecs.Game.Components.BulletComponent),
		typeof(Ecs.Game.Components.CharacterControllerComponent),
		typeof(Ecs.Game.Components.CharacterIdComponent),
		typeof(Ecs.Game.Components.CooldownComponent),
		typeof(Ecs.Game.Components.DamageComponent),
		typeof(Ecs.Game.Components.DeadComponent),
		typeof(Ecs.Game.Components.DefenceComponent),
		typeof(Ecs.Game.Components.EnemyComponent),
		typeof(Ecs.Game.Components.EnemyModelComponent),
		typeof(Ecs.Game.Components.EnemyWaveComponent),
		typeof(Ecs.Game.Components.HealthComponent),
		typeof(Ecs.Game.Components.LayerMaskComponent),
		typeof(Ecs.Game.Components.LifeTimeComponent),
		typeof(Ecs.Game.Components.MaxCooldownComponent),
		typeof(Ecs.Game.Components.MoveSpeedComponent),
		typeof(Ecs.Game.Components.PlayerComponent),
		typeof(Ecs.Game.Components.StateMachineComponent),
		typeof(Ecs.Game.Components.TargetComponent),
		typeof(Ecs.Game.Core.Components.CameraComponent),
		typeof(Ecs.Game.Core.Components.InstantiateComponent),
		typeof(Ecs.Game.Core.Components.LinkComponent),
		typeof(Ecs.Game.Core.Components.LocalPositionComponent),
		typeof(Ecs.Game.Core.Components.LookDirectionComponent),
		typeof(Ecs.Game.Core.Components.PositionComponent),
		typeof(Ecs.Game.Core.Components.PrefabComponent),
		typeof(Ecs.Game.Core.Components.RotationComponent),
		typeof(Ecs.Game.Core.Components.TransformComponent),
		typeof(Ecs.Game.Core.Components.VelocityComponent),
		typeof(LinkRemovedListenerComponent),
		typeof(LocalPositionAddedListenerComponent),
		typeof(PositionAddedListenerComponent),
		typeof(RotationAddedListenerComponent),
		typeof(VelocityAddedListenerComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(Ecs.Game.Components.AttackRangeComponent), 0 },
		{ typeof(Ecs.Game.Components.BulletComponent), 1 },
		{ typeof(Ecs.Game.Components.CharacterControllerComponent), 2 },
		{ typeof(Ecs.Game.Components.CharacterIdComponent), 3 },
		{ typeof(Ecs.Game.Components.CooldownComponent), 4 },
		{ typeof(Ecs.Game.Components.DamageComponent), 5 },
		{ typeof(Ecs.Game.Components.DeadComponent), 6 },
		{ typeof(Ecs.Game.Components.DefenceComponent), 7 },
		{ typeof(Ecs.Game.Components.EnemyComponent), 8 },
		{ typeof(Ecs.Game.Components.EnemyModelComponent), 9 },
		{ typeof(Ecs.Game.Components.EnemyWaveComponent), 10 },
		{ typeof(Ecs.Game.Components.HealthComponent), 11 },
		{ typeof(Ecs.Game.Components.LayerMaskComponent), 12 },
		{ typeof(Ecs.Game.Components.LifeTimeComponent), 13 },
		{ typeof(Ecs.Game.Components.MaxCooldownComponent), 14 },
		{ typeof(Ecs.Game.Components.MoveSpeedComponent), 15 },
		{ typeof(Ecs.Game.Components.PlayerComponent), 16 },
		{ typeof(Ecs.Game.Components.StateMachineComponent), 17 },
		{ typeof(Ecs.Game.Components.TargetComponent), 18 },
		{ typeof(Ecs.Game.Core.Components.CameraComponent), 19 },
		{ typeof(Ecs.Game.Core.Components.InstantiateComponent), 20 },
		{ typeof(Ecs.Game.Core.Components.LinkComponent), 21 },
		{ typeof(Ecs.Game.Core.Components.LocalPositionComponent), 22 },
		{ typeof(Ecs.Game.Core.Components.LookDirectionComponent), 23 },
		{ typeof(Ecs.Game.Core.Components.PositionComponent), 24 },
		{ typeof(Ecs.Game.Core.Components.PrefabComponent), 25 },
		{ typeof(Ecs.Game.Core.Components.RotationComponent), 26 },
		{ typeof(Ecs.Game.Core.Components.TransformComponent), 27 },
		{ typeof(Ecs.Game.Core.Components.VelocityComponent), 28 },
		{ typeof(LinkRemovedListenerComponent), 29 },
		{ typeof(LocalPositionAddedListenerComponent), 30 },
		{ typeof(PositionAddedListenerComponent), 31 },
		{ typeof(RotationAddedListenerComponent), 32 },
		{ typeof(VelocityAddedListenerComponent), 33 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
